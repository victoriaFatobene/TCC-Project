// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =======================
 * ENUMS
 * =======================
 */

/// Status do PEDIDO
enum OrderStatus {
  RECEBIDO
  PREPARANDO
  PRONTO
}

/**
 * =======================
 * MODELS
 * =======================
 */

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  categoryViews CategoryView[]

  @@map("users")
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products      Product[]
  categoryViews CategoryView[]
  menuItems     MenuItem[]

  @@map("categories")
}

/**
 * Disponibilidade do PRODUTO (ex.: DISPONIVEL, INDISPONIVEL, ESGOTADO)
 */
model Status {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("status")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String
  imageUrl    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // relação com categoria
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // relação com status de disponibilidade
  status   Status @relation(fields: [statusId], references: [id])
  statusId String

  productIngredients ProductIngredient[]
  items              Item[]

  @@map("products")
}

model Order {
  id         String      @id @default(uuid())
  table      Int
  status     OrderStatus @default(RECEBIDO) // RECEBIDO | PREPARANDO | PRONTO
  draft      Boolean     @default(true)
  name       String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  // marcos opcionais do fluxo
  startedAt DateTime? // quando virou PREPARANDO
  readyAt   DateTime? // quando virou PRONTO

  items Item[]

  @@map("orders")
}

model Item {
  id         String   @id @default(uuid())
  amount     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  modifications ItemModification[]

  @@map("items")
}

model MenuItem {
  id          String @id @default(uuid())
  name        String
  imageUrl    String
  description String
  price       Float

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_items")
}

model ItemModification {
  id        String   @id @default(uuid())
  type      String
  createdAt DateTime @default(now())

  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@map("item_modifications")
}

model ProductIngredient {
  id           String   @id @default(uuid())
  productId    String
  ingredientId String
  createdAt    DateTime @default(now())

  product    Product    @relation(fields: [productId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([productId, ingredientId])
  @@map("product_ingredients")
}

model CategoryView {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@map("category_views")
}

model Ingredient {
  id        String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productIngredients ProductIngredient[]
  itemModifications  ItemModification[]

  @@map("ingredients")
}
